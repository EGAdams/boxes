importFoundationimportUIKittypealiasCompleteHandlerBlock=()->()typealiasDownloadFinishedCallback=(_location:URL?)->()structSessionId{staticletIDENTIFIER:String="awm.mcba"staticvarindex:Int=0}protocolMcbaUpdateManagerClassDelegate{funcMcbaUpdateManagerShowMessage(_sender:McbaUpdateManager,message:String)funcMcbaUpdateManagerFailedConnection(_sender:McbaUpdateManager,isConnected:Bool)funcMcbaUpdateManagerProgressUpdate(_sender:McbaUpdateManager,currentProgress:Float)funcMcbaUpdateManagerProgressComplete(_sender:McbaUpdateManager,currentProgress:Float)}classMcbaUpdateManager:NSObject,URLSessionDelegate,URLSessionDownloadDelegate{privatestaticvar__once:()={varinstance=McbaUpdateManager()instance.handlerQueue=[String:CompleteHandlerBlock]()instance.callbackQueue=[String:DownloadFinishedCallback]()}()letajax=Ajax()vardelegate:McbaUpdateManagerClassDelegate?letcurProgress:Float=0;varhandlerQueue:[String:CompleteHandlerBlock]!varcallbackQueue:[String:DownloadFinishedCallback]!varlock=CountDownLock(count:2)varlatitude="";varlongitude="";varlegalname="";varviewController:ViewController?publicfuncsetViewController(viewControllerArg:ViewController){viewController=viewControllerArg}staticvarshared:McbaUpdateManager={letinstance=McbaUpdateManager()instance.handlerQueue=[String:CompleteHandlerBlock]()instance.callbackQueue=[String:DownloadFinishedCallback]()returninstance}()privateoverrideinit(){super.init()self.ajax.sendLog(class_method:"\(#function)"+":"+"\(#line)",message:"mcbaupdatemanagerinitializing...")letmcbaConfiguration=McbaConfiguration.sharedInstance()lock=mcbaConfiguration.getLock()as!CountDownLock}classfuncsharedInstance()->McbaUpdateManager{returnshared}varnextSessionId:String{letsessionIdOriginal=SessionId.indexSessionId.index=SessionId.index+1returnSessionId.IDENTIFIER+String(sessionIdOriginal)}funcupdateMcba(_callback:@escaping(()->Void)){letmainInstance=McbaConfiguration.sharedInstance()if!Reachability.isConnectedToNetwork(){self.delegate?.McbaUpdateManagerFailedConnection(self,isConnected:false)print("Notconnected")}letdownloadRoot=NSSearchPathForDirectoriesInDomains(.documentDirectory,.userDomainMask,true)[0]+""mainInstance.setMcbaBaseUrl(baseUrlArg:mainInstance.getBaseUrl()+mainInstance.getMcbaDir())letBASE_URL=mainInstance.getMcbaBaseUrl().replacingOccurrences(of:"plugins/MCBA-Wordpress",with:"")letDOWNLOAD_URL=BASE_URL+mainInstance.getWpBaseUrl()self.download(DOWNLOAD_URL+"sitemap.php"){(location:URL?)iniflocation!=nil{letdata=try?Data(contentsOf:location!)varprogressMax:Int=0ifdata==nil{print("ERRORdataisnilRETURNING")return}varjson:NSDictionary!=nildo{json=tryJSONSerialization.jsonObject(with:data!,options:.mutableContainers)as!NSDictionary}catch_{self.ajax.sendLog(class_method:"\(#function)"+":"+"\(#line)",message:"Uhoh,somethingwrongwithjson")return}letmap:[String]?=json["map"]as!NSArrayas?[String]varqueueIndex=0varfileQueue:[Int:String]=[Int:String]()forvalinmap!{letBASE_URL=mainInstance.getMcbaBaseUrl().replacingOccurrences(of:"plugins/MCBA-Wordpress",with:"")letDOWNLOAD_URL=BASE_URL+mainInstance.getWpBaseUrl()leturl=DOWNLOAD_URL+valletdestUrl=downloadRoot+"/www/"+valif!FileManager.default.fileExists(atPath:destUrl){fileQueue[queueIndex]=urlqueueIndex=queueIndex+1}}progressMax=fileQueue.countprint("\(fileQueue.count)URLSinqueue")self.downloadURLQueue(fileQueue){(id:Int,origPath:String,newPath:URL?)inifnewPath!=nil{fileQueue.removeValue(forKey:id)if(fileQueue.count>0&&progressMax>0){letcurProgress:Float=Float(fileQueue.count)/Float(progressMax)GlobalVariables.curProgress=curProgressself.delegate?.McbaUpdateManagerProgressUpdate(self,currentProgress:curProgress)}iffileQueue.count<2{self.delegate?.McbaUpdateManagerProgressComplete(self,currentProgress:100)callback()}}else{print("Filenotsaved")}}}}}funcgetMcbaConfig(_callback:@escaping((URL?)->())){letmainInstance=McbaConfiguration.sharedInstance()mainInstance.setMcbaBaseUrl(baseUrlArg:mainInstance.getBaseUrl()+mainInstance.getMcbaDir())letBASE_URL=mainInstance.getMcbaBaseUrl().replacingOccurrences(of:"plugins/MCBA-Wordpress",with:"")letDOWNLOAD_URL=BASE_URL+mainInstance.getWpBaseUrl()self.ajax.sendLog(class_method:"\(#function)"+":"+"\(#line)",message:"downloadingapp_config.json...")self.download(DOWNLOAD_URL+"app_config.json",callback:callback)}funcdownloadURLQueue(_queue:[Int:String],callback:((Int,String,URL?)->Void)?){for(id,fileUrl)inqueue{self.download(fileUrl){(newLocation:URL?)inifcallback!=nil{callback!(id,fileUrl,newLocation)}}}}funcdownload(__url:String,callback:DownloadFinishedCallback?){varurl:String!if(_url.range(of:"php",options:NSString.CompareOptions.backwards)!=nil){url=_url+"?mobile=true"}else{url=_url}url=url.addingPercentEncoding(withAllowedCharacters:CharacterSet.urlQueryAllowed)letid=self.nextSessionIdifcallback!=nil{addDownloadFinishedCallback(callback!,identifier:id)}letconfiguration=URLSessionConfiguration.background(withIdentifier:id)letbackgroundSession=Foundation.URLSession(configuration:configuration,delegate:self,delegateQueue:nil)letrequestUrl=URL(string:url)if(requestUrl!=nil){letrequest=URLRequest(url:requestUrl!)letdownloadTask=backgroundSession.downloadTask(with:request)downloadTask.taskDescription=iddownloadTask.resume()}else{print("BADURL:\(url)")}}funcurlSession(_session:URLSession,downloadTask:URLSessionDownloadTask,didFinishDownloadingTolocation:URL){leturl:String!=downloadTask.originalRequest!.url!.absoluteString.removingPercentEncodingvardest:Stringletrange=url.range(of:"/www/")ifrange!=nil{dest=String(url[range!.lowerBound...])}else{dest=""}dest=dest.replacingOccurrences(of:"php",with:"html")letdownloadRoot=NSSearchPathForDirectoriesInDomains(.documentDirectory,.userDomainMask,true)[0]+""lettempFilePath=downloadRoot+destletresult=matches(for:"((http[s]?|ftp|file):\\/)?\\/?([^:\\/\\s]+)((\\/\\w+)*\\/)([\\w\\-\\.]+[^#?]+)",in:tempFilePath)letfilePath=result[0]letfileNameStartLoc=filePath.range(of:"/",options:NSString.CompareOptions.backwards)letdirectory=(String(filePath[..<fileNameStartLoc!.lowerBound]))do{tryFileManager.default.createDirectory(atPath:directory,withIntermediateDirectories:true,attributes:nil)}catchleterrorasNSError{print("ERRORcreatingdirectory:\(error.localizedDescription)")}if!FileManager.default.fileExists(atPath:directory){print("ERRORcreatingdirectoryat\(directory)")}if(FileManager.default.fileExists(atPath:filePath)){do{tryFileManager.default.removeItem(atPath:filePath)}catchleterrorasNSError{print("***ERRORdeletingfile:\(error.localizedDescription)***")}}do{tryFileManager.default.moveItem(at:location,to:URL(fileURLWithPath:filePath))if(filePath.contains("index.html")){if(FileManager.default.fileExists(atPath:filePath)){DispatchQueue.main.async{self.lock.countDown()self.viewController?.refreshWebView()}}}if(filePath.contains("app_config.json")){letpath=URL(fileURLWithPath:filePath)lettext=try?String(contentsOf:path)varapp_config=try!String(contentsOf:path,encoding:.utf8)letconverter=StringToJsonConverter()letconvertedAppConfig=converter.execute(textToConvert:app_config)lettakeVarOff=text!.replacingOccurrences(of:"varconfig_data=",with:"")varoriginalText=takeVarOff.replacingOccurrences(of:"\\\"",with:"\"")originalText=originalText.replacingOccurrences(of:"\\n",with:"")originalText=originalText.replacingOccurrences(of:"\\/",with:"")originalText=originalText.replacingOccurrences(of:"&",with:"")originalText=originalText.replacingOccurrences(of:";",with:"")letnotagText=originalText.withoutHtmlTagsstructGenericOptions:Decodable{lettext:Stringlettype:Stringletvalue:String}structLegalName:Decodable{letlegalname:GenericOptions}structCoordinate:Decodable{letlatitude:GenericOptionsletlongitude:GenericOptionsletlegalname:GenericOptions}structMain:Decodable{lettemplate:Stringletoptions:Coordinate}letjsonData=notagText.data(using:.utf8)!do{letjsonDecoder=JSONDecoder()letmain=tryjsonDecoder.decode(Main.self,from:jsonData)self.latitude=main.options.latitude.valueself.longitude=main.options.longitude.valueself.legalname=main.options.legalname.value}catch{print("Unexpectederror:\(error).")}}}catchleterrorasNSError{print("***ERROR:movingfrom:\(location)to\(filePath):\(error.localizedDescription)***")}callCallback(downloadTask.taskDescription,location:URL(fileURLWithPath:filePath))}funcaddDownloadFinishedCallback(_callback:@escapingDownloadFinishedCallback,identifier:String){callbackQueue[identifier]=callback}funcaddCompletionHandler(_handler:@escapingCompleteHandlerBlock,identifier:String){self.ajax.sendLog(class_method:"\(#function)"+":"+"\(#line)",message:"addingcompletionhandler...")handlerQueue[identifier]=handler}funccallCallback(_identifier:String!,location:URL?){DispatchQueue.main.async{ifletcallback:DownloadFinishedCallback=self.callbackQueue[identifier]{self.callbackQueue!.removeValue(forKey:identifier)iflocation!=nil{callback(location)}else{callback(nil)}}}}funccallCompletionHandlerForSession(_identifier:String!){self.ajax.sendLog(class_method:"\(#function)"+":"+"\(#line)",message:"callbackgroundcompletionhandlercallback")self.ajax.sendLog(class_method:"\(#function)"+":"+"\(#line)",message:"identifier\(String(describing:identifier))handlerQueue:"+String(describing:handlerQueue))ifvar_:CompleteHandlerBlock=handlerQueue[identifier]{if(handlerQueue[identifier]!=nil){handlerQueue!.removeValue(forKey:identifier)}}}funcurlSessionDidFinishEvents(forBackgroundURLSessionsession:URLSession){if!session.configuration.identifier!.isEmpty{self.ajax.sendLog(class_method:"\(#function)"+":"+"\(#line)",message:"mcbaCompletionHandlerBACKGROUND")callCompletionHandlerForSession(session.configuration.identifier)}}funcurlSession(_session:URLSession,didBecomeInvalidWithErrorerror:Error?){print("ERROR-didBecomeInvalidWithError:\(String(describing:error?.localizedDescription)).")}funcurlSession(_session:URLSession,didReceivechallenge:URLAuthenticationChallenge,completionHandler:@escaping(URLSession.AuthChallengeDisposition,URLCredential?)->Void){self.ajax.sendLog(class_method:"\(#function)"+":"+"\(#line)",message:"mcbaReceivedchallenge")completionHandler(Foundation.URLSession.AuthChallengeDisposition.useCredential,URLCredential(trust:challenge.protectionSpace.serverTrust!))}funcurlSession(_session:URLSession,downloadTask:URLSessionDownloadTask,didWriteDatabytesWritten:Int64,totalBytesWritten:Int64,totalBytesExpectedToWrite:Int64){}funcurlSession(_session:URLSession,task:URLSessionTask,didCompleteWithErrorerror:Error?){iferror==nil{print("Completedsuccessfully.")}else{print("Failed,error:\(String(describing:error?.localizedDescription))")}}funcurlSession(_session:URLSession,downloadTask:URLSessionDownloadTask,didResumeAtOffsetfileOffset:Int64,expectedTotalBytes:Int64){print("Downloadresumedatoffset\(fileOffset)bytesoutofanexpected\(expectedTotalBytes)bytes.")}funcmatches(forregex:String,intext:String)->[String]{do{letregex=tryNSRegularExpression(pattern:regex)letresults=regex.matches(in:text,range:NSRange(text.startIndex...,in:text))returnresults.map{String(text[Range($0.range,in:text)!])}}catchleterror{print("invalidregex:\(error.localizedDescription)")return[]}}funcprintAttributes(filename:String)->Void{letfileManager=FileManager()do{letattributes=tryfileManager.attributesOfItem(atPath:filename)print(attributes)}catchleterrorasNSError{print("Ooops!Somethingwentwrong:\(error)")}}}